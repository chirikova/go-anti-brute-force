// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// SubNetStoragable is an autogenerated mock type for the SubNetStoragable type
type SubNetStoragable struct {
	mock.Mock
}

// Add provides a mock function with given fields: subnet
func (_m *SubNetStoragable) Add(subnet string) error {
	ret := _m.Called(subnet)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(subnet)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HasIP provides a mock function with given fields: subnet
func (_m *SubNetStoragable) HasIP(subnet string) (bool, error) {
	ret := _m.Called(subnet)

	if len(ret) == 0 {
		panic("no return value specified for HasIP")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(subnet)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(subnet)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(subnet)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Remove provides a mock function with given fields: subnet
func (_m *SubNetStoragable) Remove(subnet string) error {
	ret := _m.Called(subnet)

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(subnet)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewSubNetStoragable creates a new instance of SubNetStoragable. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSubNetStoragable(t interface {
	mock.TestingT
	Cleanup(func())
}) *SubNetStoragable {
	mock := &SubNetStoragable{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
