// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: docs/proto/api.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ApiService_Auth_FullMethodName            = "/api.ApiService/Auth"
	ApiService_Reset_FullMethodName           = "/api.ApiService/Reset"
	ApiService_BlacklistAdd_FullMethodName    = "/api.ApiService/BlacklistAdd"
	ApiService_BlacklistRemove_FullMethodName = "/api.ApiService/BlacklistRemove"
	ApiService_WhitelistAdd_FullMethodName    = "/api.ApiService/WhitelistAdd"
	ApiService_WhitelistRemove_FullMethodName = "/api.ApiService/WhitelistRemove"
)

// ApiServiceClient is the client API for ApiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiServiceClient interface {
	Auth(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error)
	Reset(ctx context.Context, in *ResetRequest, opts ...grpc.CallOption) (*ResetResponse, error)
	BlacklistAdd(ctx context.Context, in *BlacklistAddRequest, opts ...grpc.CallOption) (*BlacklistAddResponse, error)
	BlacklistRemove(ctx context.Context, in *BlacklistRemoveRequest, opts ...grpc.CallOption) (*BlacklistRemoveResponse, error)
	WhitelistAdd(ctx context.Context, in *WhitelistAddRequest, opts ...grpc.CallOption) (*WhitelistAddResponse, error)
	WhitelistRemove(ctx context.Context, in *WhitelistRemoveRequest, opts ...grpc.CallOption) (*WhitelistRemoveResponse, error)
}

type apiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApiServiceClient(cc grpc.ClientConnInterface) ApiServiceClient {
	return &apiServiceClient{cc}
}

func (c *apiServiceClient) Auth(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, ApiService_Auth_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) Reset(ctx context.Context, in *ResetRequest, opts ...grpc.CallOption) (*ResetResponse, error) {
	out := new(ResetResponse)
	err := c.cc.Invoke(ctx, ApiService_Reset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) BlacklistAdd(ctx context.Context, in *BlacklistAddRequest, opts ...grpc.CallOption) (*BlacklistAddResponse, error) {
	out := new(BlacklistAddResponse)
	err := c.cc.Invoke(ctx, ApiService_BlacklistAdd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) BlacklistRemove(ctx context.Context, in *BlacklistRemoveRequest, opts ...grpc.CallOption) (*BlacklistRemoveResponse, error) {
	out := new(BlacklistRemoveResponse)
	err := c.cc.Invoke(ctx, ApiService_BlacklistRemove_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) WhitelistAdd(ctx context.Context, in *WhitelistAddRequest, opts ...grpc.CallOption) (*WhitelistAddResponse, error) {
	out := new(WhitelistAddResponse)
	err := c.cc.Invoke(ctx, ApiService_WhitelistAdd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) WhitelistRemove(ctx context.Context, in *WhitelistRemoveRequest, opts ...grpc.CallOption) (*WhitelistRemoveResponse, error) {
	out := new(WhitelistRemoveResponse)
	err := c.cc.Invoke(ctx, ApiService_WhitelistRemove_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiServiceServer is the server API for ApiService service.
// All implementations must embed UnimplementedApiServiceServer
// for forward compatibility
type ApiServiceServer interface {
	Auth(context.Context, *AuthRequest) (*AuthResponse, error)
	Reset(context.Context, *ResetRequest) (*ResetResponse, error)
	BlacklistAdd(context.Context, *BlacklistAddRequest) (*BlacklistAddResponse, error)
	BlacklistRemove(context.Context, *BlacklistRemoveRequest) (*BlacklistRemoveResponse, error)
	WhitelistAdd(context.Context, *WhitelistAddRequest) (*WhitelistAddResponse, error)
	WhitelistRemove(context.Context, *WhitelistRemoveRequest) (*WhitelistRemoveResponse, error)
	mustEmbedUnimplementedApiServiceServer()
}

// UnimplementedApiServiceServer must be embedded to have forward compatible implementations.
type UnimplementedApiServiceServer struct {
}

func (UnimplementedApiServiceServer) Auth(context.Context, *AuthRequest) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Auth not implemented")
}
func (UnimplementedApiServiceServer) Reset(context.Context, *ResetRequest) (*ResetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reset not implemented")
}
func (UnimplementedApiServiceServer) BlacklistAdd(context.Context, *BlacklistAddRequest) (*BlacklistAddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlacklistAdd not implemented")
}
func (UnimplementedApiServiceServer) BlacklistRemove(context.Context, *BlacklistRemoveRequest) (*BlacklistRemoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlacklistRemove not implemented")
}
func (UnimplementedApiServiceServer) WhitelistAdd(context.Context, *WhitelistAddRequest) (*WhitelistAddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WhitelistAdd not implemented")
}
func (UnimplementedApiServiceServer) WhitelistRemove(context.Context, *WhitelistRemoveRequest) (*WhitelistRemoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WhitelistRemove not implemented")
}
func (UnimplementedApiServiceServer) mustEmbedUnimplementedApiServiceServer() {}

// UnsafeApiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiServiceServer will
// result in compilation errors.
type UnsafeApiServiceServer interface {
	mustEmbedUnimplementedApiServiceServer()
}

func RegisterApiServiceServer(s grpc.ServiceRegistrar, srv ApiServiceServer) {
	s.RegisterService(&ApiService_ServiceDesc, srv)
}

func _ApiService_Auth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).Auth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_Auth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).Auth(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_Reset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).Reset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_Reset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).Reset(ctx, req.(*ResetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_BlacklistAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlacklistAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).BlacklistAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_BlacklistAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).BlacklistAdd(ctx, req.(*BlacklistAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_BlacklistRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlacklistRemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).BlacklistRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_BlacklistRemove_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).BlacklistRemove(ctx, req.(*BlacklistRemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_WhitelistAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WhitelistAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).WhitelistAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_WhitelistAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).WhitelistAdd(ctx, req.(*WhitelistAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_WhitelistRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WhitelistRemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).WhitelistRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_WhitelistRemove_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).WhitelistRemove(ctx, req.(*WhitelistRemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ApiService_ServiceDesc is the grpc.ServiceDesc for ApiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.ApiService",
	HandlerType: (*ApiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Auth",
			Handler:    _ApiService_Auth_Handler,
		},
		{
			MethodName: "Reset",
			Handler:    _ApiService_Reset_Handler,
		},
		{
			MethodName: "BlacklistAdd",
			Handler:    _ApiService_BlacklistAdd_Handler,
		},
		{
			MethodName: "BlacklistRemove",
			Handler:    _ApiService_BlacklistRemove_Handler,
		},
		{
			MethodName: "WhitelistAdd",
			Handler:    _ApiService_WhitelistAdd_Handler,
		},
		{
			MethodName: "WhitelistRemove",
			Handler:    _ApiService_WhitelistRemove_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "docs/proto/api.proto",
}
